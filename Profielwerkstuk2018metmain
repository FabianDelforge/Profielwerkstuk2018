import pygame
from pygame import *

PlatformImages = {}
BGImages = {}

display_width = 800
display_height = 640

def main():
    pygame.init()
    screen = pygame.display.set_mode((display_width, display_height), 0, 32)
    pygame.display.set_caption("Use arrows to move!")
    timer = pygame.time.Clock()

    up = down = left = right = running = False
    bg = Surface((32,32))
    bg.convert()
    bg.fill(Color("#000000"))
    
    entities = pygame.sprite.Group()
    platforms = []

    x = y = 0
    level = [
        "AAAAAAAAAAAAAAAAAAAAAAAAA",
        "A                       A",
        "A                       A",
        "A              P        A",
        "A                       A",
        "A                       A",
        "A                       A",
        "A                       A",
        "A     ZZ       BB       A",
        "A     ZZZZZZ   BB       A",
        "A   ZZZZZZZZZ           A",
        "A      B                A",
        "A      A                A",
        "A    BABAB              A",
        "A      A                A",
        "A      B                A",
        "A                       A",
        "A               BAAB    A",
        "A                       A",
        "AAAAAAAAAAAAAAAAAAAAAAAAA",]
    # build the level
    for row in level:
        for col in row:
            if col == "P":
                player = Player(x, y)
            if col == "A":
                a = Platform(x, y, "1")
                platforms.append(a)
                entities.add(a)
            if col == "B":
                b = Platform(x, y, "2")
                platforms.append(b)
                entities.add(b)
            if col == "Z":
                z = Background(x, y, "1")
                entities.add(z)
            x += 32
        y += 32
        x = 0

    entities.add(player)

    while 1:
        timer.tick(60)

        for e in pygame.event.get():
            if e.type == QUIT:
                quit()
            if e.type == KEYDOWN and e.key == K_ESCAPE:
                quit()
            
            if e.type == KEYDOWN and e.key == K_UP:
                up = True
            if e.type == KEYDOWN and e.key == K_LEFT:
                left = True
            if e.type == KEYDOWN and e.key == K_RIGHT:
                right = True

            if e.type == KEYUP and e.key == K_UP:
                up = False
            if e.type == KEYUP and e.key == K_RIGHT:
                right = False
            if e.type == KEYUP and e.key == K_LEFT:
                left = False

        # draw background
        for y in range(32):
            for x in range(32):
                screen.blit(bg, (x * 32, y * 32))

        # update player, draw everything else
        player.update(up, down, left, right, running, platforms)
        entities.draw(screen)

        pygame.display.update()

class Entity(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

class Player(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.xvel = 0
        self.yvel = 0
        self.onGround = False
        self.image = Surface((32,32))
        self.image.fill(Color("#0000FF"))
        self.image.convert()
        self.rect = Rect(x, y, 32, 32)

    def update(self, up, down, left, right, running, platforms):
        if up:
            # only jump if on the ground
            if self.onGround: self.yvel -= 8
        if left:
            self.xvel = -8
        if right:
            self.xvel = 8
        if not self.onGround:
            # only accelerate with gravity if in the air
            self.yvel += 0.3
            # max falling speed
            if self.yvel > 100: self.yvel = 100
        if not(left or right):
            self.xvel = 0
        # increment in x direction
        self.rect.left += self.xvel
        # do x-axis collisions
        self.collide(self.xvel, 0, platforms)
        # increment in y direction
        self.rect.top += self.yvel
        # assuming we're in the air
        self.onGround = False;
        # do y-axis collisions
        self.collide(0, self.yvel, platforms)

    def collide(self, xvel, yvel, platforms):
        for p in platforms:
            if pygame.sprite.collide_rect(self, p):
                if isinstance(p, ExitBlock):
                    pygame.event.post(pygame.event.Event(QUIT))
                if xvel > 0:
                    self.rect.right = p.rect.left
                    print ("collide right")
                if xvel < 0:
                    self.rect.left = p.rect.right
                    print ("collide left")
                if yvel > 0:
                    self.rect.bottom = p.rect.top
                    self.onGround = True
                    self.yvel = 0
                if yvel < 0:
                    self.rect.top = p.rect.bottom
                    self.yvel = 0


class Platform(Entity):
    def __init__(self, x, y, number):
        Entity.__init__(self)
        self.load_images()
        self.image = PlatformImages['platform_'+number]
        self.rect = Rect(x, y, 32, 32)

    def load_images(self):
        global PlatformImages
        PlatformImages['platform_1'] = pygame.image.load(r"C:/Users/Gebruiker/Downloads/Profielwerkstuk/Objects/blok1.png")
        PlatformImages['platform_2'] = pygame.image.load(r"C:/Users/Gebruiker/Downloads/Profielwerkstuk/Objects/blok2.png")

class Background(Entity):
    def __init__(self, x, y, number):
        Entity.__init__(self)
        self.load_images()
        self.image = BGImages['BG_'+number]
        self.rect = Rect(x, y, 32, 32)

    def load_images(self):
        global BGImages
        BGImages['BG_1'] = pygame.image.load(r"C:/Users/Gebruiker/Downloads/Profielwerkstuk/Objects/achtergrond1.png")

class ExitBlock(Platform):
    def __init__(self, x, y):
        Platform.__init__(self, x, y)
        self.image.fill(Color("#0033FF"))

if __name__ == "__main__":
    main()
